JFrame 变量名 = new JFrame("窗口名字");                                                              // 创建一个 JFrame 对象，用于承载整个窗口
变量名.setSize(宽,高);                                                                              // 设置窗口的大小为 宽x高 像素
变量名.setLayout(new BorderLayout());                                                              // 设置窗口的布局为 BorderLayout，用于放置组件
JPanel 变量名 = new JPanel();                                                                      // 创建一个 JPanel 对象，用于放置其他组件
变量名.setLayout(null);                                                                            // 设置面板布局为 null，可自由定位组件
JLabel 变量名 = new JLabel("标签内容");                                                             // 创建一个标签，用于显示提示文本
变量名.setBounds(x坐标,y坐标,宽,高);                                                                  // 设置位置和大小
变量名.add(变量名);                                                                                  // 将标签添加到面板中
JTextField 变量名 = new JTextField(该文本框的长度);                                                    // 创建一个文本框，用于输入符号
JComboBox<String> 变量名 = new JComboBox<>(new String[]{"内容", "内容", "内容", "内容"});              // 创建一个下拉列表框，用于选择内容
JButton 变量名 = new JButton("按钮名字");                                                            // 创建一个按钮，用于触发生成金字塔的操作
JTextArea 变量名 = new JTextArea();                                                                // 创建一个文本区域，用于显示金字塔的结果
变量名.setEditable(false/true);                                                                    // 设置文本区域不可编辑
变量名.setLineWrap(true);                                                                          // 设置自动换行
变量名.setWrapStyleWord(true);                                                                     // 设置按单词换行
变量名.add(变量名, BorderLayout.CENTER);                                                            // 将面板添加到窗口的中间位置
变量名.setVisible(true);                                                                           // 设置窗口可见
变量名.setFont(new Font("字体的名称：指定的非自定义", Font.PLAIN, 12是字体大小));                         //为文本区域设置等宽字体，例如使用 Monospaced 字体
generateBtn.addActionListener(new ActionListener() {});                                           // 添加按钮监听器


public void actionPerformed(ActionEvent e){}                                                      //是 ActionListener 接口中的抽象方法，需要在实现该接口的类中重写该方法。该方法是响应用户界面中按钮、菜单等组件的操作事件的方法。当用户触发了这些组件的操作事件时，该方法就会被调用。在方法体内，可以编写具体的处理逻辑来完成相应的功能。
                                                                                                    ActionEvent 是一个事件类型，包含了与用户操作相关的一些信息，例如事件源和事件类型等。可以通过 getActionCommand() 方法获取组件的操作命令，进而进行特定的处理。
                                                                                                    在实现 ActionListener 接口的类中，需要将需要处理的组件添加到 ActionListener 对象中，以便监听其操作事件，并执行相应的操作。例如，在按钮对象上调用 addActionListener() 方法，将 ActionListener 对象传入，以便监听按钮的操作事件。
                                                                                                    总之，public void actionPerformed(ActionEvent e) {} 方法是实现 ActionListener 接口时必须要重写的方法，用于处理用户操作事件并完成相应的功能。


String lineText = lineField.getText();                                                              // 通过.getText()从名为lineField的变量中获取其中的内容然后赋给名为lineText的String类型变量
String color = (String) colorBox.getSelectedItem();                                                 //通过.getSelectedItem()从名为colorBox的对象中获取内容再通过   (想要转化的类型)  强转之后赋给名为color的变量


@Override                                                                                           //是一个注解（Annotation），用于指示方法覆盖（Override）了父类中的同名方法或实现了接口中的同名方法。它是 Java 5 中引入的特性，可以增加代码的可读性和可靠性。
                                                                                                      当在子类中定义一个与父类中的方法具有相同名称、参数列表和返回类型的方法时，我们希望这个方法能够覆盖（重写）父类中的方法。但是，如果由于某些原因，子类方法的命名写错了或者参数列表不匹配，编译器将无法检测到这个错误，使得我们以为自己已经成功地覆盖了父类方法，但实际上并没有。
                                                                                                      为了解决这个问题，在覆盖父类方法时，我们可以使用 @Override 注解来显式地告诉编译器，我们希望此方法是要覆盖父类的方法。如果编译器发现当前方法并没有覆盖任何父类的方法，它会提示一个编译错误，这样可以避免潜在的错误。
                                                                                                      例如，考虑以下示例：
                                                                                                      class Parent {
                                                                                                          public void foo() {
                                                                                                              System.out.println("Parent's foo");
                                                                                                          }
                                                                                                      }
                                                                                                      class Child extends Parent {
                                                                                                          @Override
                                                                                                          public void foo() {
                                                                                                              System.out.println("Child's foo");
                                                                                                          }
                                                                                                      }
                                                                                                      在这个例子中，Child 类继承了 Parent 类，并覆盖了父类的 foo() 方法。通过在子类的 foo() 方法前添加 @Override 注解，我们可以确保编译器会检查这个方法是否正确地覆盖了父类的方法。
                                                                                                      如果我们不小心将 foo() 方法的名称写错为 faa()，编译器就会报错，提示我们该方法并没有覆盖父类的方法。
                                                                                                      总之，@Override 注解用于指示子类方法覆盖了父类中的同名方法或实现了接口中的同名方法，它帮助提高代码的可读性和可靠性，并在编译时检测到潜在的错误。

if (!Eorror.isInteger(lineText)) {return;}                                                           //首先，! 运算符将 Eorror.isInteger(lineText) 的结果取反。（Eorror是一个类的名字，isInteger是Eorror里的一个函数名字，lineText装着要获取的内容）
                                                                                                       如果 Eorror.isInteger(lineText) 返回 true，则取反后为 false；如果返回 false，则取反后为 true。
                                                                                                       接着，通过 if 关键字和条件表达式判断取反后的结果。如果取反后的结果为 true，即 Eorror.isInteger(lineText) 返回 false，则执行条件块中的代码。
                                                                                                       在这段代码中，如果输入的 lineText 不是有效的整数，表示 Eorror.isInteger(lineText) 返回 false，那么会执行以下操作：
                                                                                                       显示错误提示或处理错误的逻辑。使用 return; 语句提前结束当前方法或函数的执行，并返回调用者。
                                                                                                       这样，在输入层数不是有效整数时，程序会跳过后续的代码执行而直接返回。这种处理方式通常用于避免在无效输入情况下继续执行可能导致错误的代码。


int line = Integer.parseInt(lineText);                                                                 //是将字符串类型的 lineText 转换为整数类型的 line。它使用了 Integer.parseInt() 方法，该方法接受一个字符串作为参数，并尝试将其解析为一个整数。
                                                                                                          如果解析成功，则返回解析后的整数；如果解析失败（例如，字符串无法表示一个有效的整数），则会抛出 NumberFormatException 异常。
                                                                                                          因此，在这段代码中，假设 lineText 是一个有效的整数字符串，那么它会被转换为对应的整数值并赋给 line 变量。

String result = jinzita(line, symbol, color);                                                           //是调用 jinzita() 方法，并将返回的结果赋值给 result 变量。jinzita() 方法是一个自定义的方法，它接受三个参数：line、symbol、color。
                                                                                                          这里使用 line 变量作为参数传递给 jinzita() 方法。根据实际需求，symbol 和 color 也被传递给了 jinzita() 方法。jinzita() 方法的具体实现在代码中可能没有展示出来。

equals(color)                                                                                          //是一个Java中的字符串比较方法，它用于比较两个字符串是否相等。在上述代码中，我们使用它来检查用户选择的颜色是否与特定字符串相匹配。
                                                                                                         在这里，color 是一个用户选择的颜色字符串，例如："黑色"、"红色"、"蓝色"、"绿色"。
                                                                                                         equals(color) 方法将 color 字符串与括号中的字符串进行比较，如果它们完全相同（包括大小写敏感），则返回 true，否则返回 false。